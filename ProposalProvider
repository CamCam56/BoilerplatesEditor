* generated by Xtext 2.11.0
 */
package org.xtext.example.mydsl1.ui.contentassist


import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.emf.edit.provider.StyledString
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.swt.widgets.Display
import org.xtext.example.mydsl1.myDsl.Article
import org.xtext.example.mydsl1.myDsl.PrepCondition

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
  

class MyDslProposalProvider extends AbstractMyDslProposalProvider {
 	
def protected doCreateProposal(String proposal, StyledString displayString, Image image, int priority,
		ContentAssistContext context) {
 	
 	for (enum : Article) {
			if (proposal.equals(enum)) {

				val s = new Styled;
				return super.doCreateProposal(enum, s.append(enum + " - article"),
					new Image(Display::^default,
						"C:\\Users\\daclin\\workspace\\org.xtext.requirement.temporal.ui\\icons\\term.png"), priority,
					context)
			}
		}
		
		
 	for (String str : PrepCondition) {
			if (proposal.equals(str)) {

				val s = new StyledString();
				return super.doCreateProposal(str, s.append(str + " - PrepCondition"),
					new Image(Display::^default,
						"C:\\Users\\daclin\\workspace\\org.xtext.requirement.temporal.ui\\icons\\term.png"), priority,
					context)
					
					}
		
		}
 }
 

//  public String text(Model model) {
//    return model.getName() + " (" + event.getCode() + ")";
//  }
//  
//  public String image(Event event) {
//    return "event.gif";
//  }
//  
//  public String image(State state) {
//    return "state.gif";
//  }
//}
//public class SecretCompartmentsLabelProvider 
//    extends DefaultLabelProvider {
// 
// protected Function<IEObjectDescription, ICompletionProposal> getProposalFactory(String Model,
//			ContentAssistContext contentAssistContext) {
//		return new DefaultProposalCreator(contentAssistContext, ruleName, getQualifiedNameConverter());
//	}
//}