/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.mydsl1.ui.contentassist


import org.eclipse.jface.viewers.StyledString
import org.eclipse.swt.graphics.Image
import org.eclipse.swt.widgets.Display
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class MyDslProposalProvider extends AbstractMyDslProposalProvider {
	
	val PrepCondition = #["when", "while", "where","then", "the"]
	val Article = #["the"]
	val Verbs1 = #['shall', 'should', 'will', "is obliged to", "intends to do",'must','allows']
	val Verbs2 = #["provides with the ability to",'processes',"is able to"]
	val TypeLibre = #["LIBRE_EXIGENCE:",'LIBRE_BOILERPLATE:']
	val PrepConditionIf = #["If"]
	
	
override protected doCreateProposal(String proposal, StyledString displayString, Image image, int priority,
		ContentAssistContext context) {
 	
 	for (String str : PrepCondition) {
			if (proposal.equals(str)) {

				val s = new StyledString();
				return super.doCreateProposal(str, s.append(str + " - prepcondition is used to define the condition"),
					new Image(Display::^default,
						"C:\\Users\\daclin\\workspace\\org.xtext.requirement.temporal.ui\\icons\\term.png"), priority,
					context)//chemin de l'image à changer
					}
			}
			
			for (String str : Verbs1) {
			if (proposal.equals(str)) {
				val s = new StyledString();
				return super.doCreateProposal(str, s.append(str + " - Verbs1 is used to describe the degree of the requirement"),
					new Image(Display::^default,
						"C:\\Users\\daclin\\workspace\\org.xtext.requirement.temporal.ui\\icons\\term.png"), priority,
					context)//chemin de l'image à changer
					}
			}
			
			for (String str : Verbs2) {
			if (proposal.equals(str)) {

				val s = new StyledString();
				return super.doCreateProposal(str, s.append(str + " - Verbs2 is used to describe the degree of ability of the system to do the requirement"),
					new Image(Display::^default,
						"C:\\Users\\daclin\\workspace\\org.xtext.requirement.temporal.ui\\icons\\term.png"), priority,
					context)//chemin de l'image à changer
					
					}
			}
			
			
			for (String str : TypeLibre) {
			if (proposal.equals(str)) {

				val s = new StyledString();
				return super.doCreateProposal(str, s.append(str + " - typeLibre"),
					new Image(Display::^default,
						"C:\\Users\\daclin\\workspace\\org.xtext.requirement.temporal.ui\\icons\\term.png"), priority,
					context)//chemin de l'image à changer
					
					}
			}
			
			/*for (String str : Article){
 		if (Article === null) {
			return null;
		}
		if (Article.length() == 0) {
			return Article;
		}
		if (Article.)
		}
		StringBuilder Article = new StringBuilder(Article);
		result.replace(0, 1, result.substring(0, 1).toUpperCase());
		return Article.toString();*/// Beugue à cet endroit 
		
		
			
 super.doCreateProposal(proposal, displayString, image, priority, context)	
 }
	
}
 	

 

//  public String text(Model model) {
//    return model.getName() + " (" + event.getCode() + ")";
//  }
//  
//  public String image(Event event) {
//    return "event.gif";
//  }
//  
//  public String image(State state) {
//    return "state.gif";
//  }
//}
//public class SecretCompartmentsLabelProvider 
//    extends DefaultLabelProvider {
// 
// protected Function<IEObjectDescription, ICompletionProposal> getProposalFactory(String Model,
//			ContentAssistContext contentAssistContext) {
//		return new DefaultProposalCreator(contentAssistContext, ruleName, getQualifiedNameConverter());
//	}
//}